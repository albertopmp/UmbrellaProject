1. Host the website - In this first step I hosted my Angular WebApp using **S3**. I created a bucket and assigned the corresponding permissions through a Bucket Policy. Then I uploaded the resulting files from executing ng build (create production files) and my WebApp was accessible from http://umbrella-project.s3-website-eu-west-1.amazonaws.com/umbrella


https://aws.amazon.com/es/blogs/networking-and-content-delivery/amazon-s3-amazon-cloudfront-a-match-made-in-the-cloud/

2. CloudFront - To help optimize your application’s performance and security while effectively managing cost, we recommend that you also set up Amazon CloudFront to work with your S3 bucket to serve and protect the content. **By design, delivering data out of CloudFront can be more cost effective than delivering it from S3 directly to your users.** 

CloudFront serves content through a worldwide network of data centers called Edge Locations. Using edge servers to cache and serve content improves performance by providing content closer to where viewers are located

When a user requests content that you serve with CloudFront, their request is routed to a nearby Edge Location. If CloudFront has a cached copy of the requested file, CloudFront delivers it to the user, providing a fast (low-latency) response. If the file they’ve requested isn’t yet cached, CloudFront retrieves it from your origin – for example, the S3 bucket where you’ve stored your content. Then, for the next local request for the same content, it’s already cached nearby and can be served immediately.

-> If the content is not yet cached with an edge server, CloudFront retrieves it from the S3 bucket origin. And because **the content traverses the AWS private network instead of the public internet and CloudFront optimizes the TCP handshake**, the request and content return is still much faster than access across the public internet

Another security feature of CloudFront is Origin Access Identity (OAI), which restricts access to an S3 bucket and its content to only CloudFront and operations it performs


After setting up S3 and CloudFront with a CloudFormation template, which created a new CloudFront distribution that I assigned to my existing S3 bucket where I stored the web content and chose to apply OAI to secure that content -> This way the content of the bucket can be only accessed through CloudFront

My WebApp was accessible from https://dh2hg4ju0nwba.cloudfront.net/umbrella and no longer from http://umbrella-project.s3-website-eu-west-1.amazonaws.com/umbrella (as I restored the "Block all public access settings")

*************
Wasn’t that straightforward? I hope that now you can see how simple it is to set up CloudFront with S3, and get two great benefits: 1) increase the performance of your applications by serving content much faster to your users and 2) expand the security of your application with the security features of CloudFront. Oh, and it’s worth repeating that the price for transferring data from CloudFront to the internet is often lower than from S3 to the internet, so you might even lower your AWS bill!
*************



https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring.html

- Routing traffic to your resources:
Amazon Route 53 helps to route users to your resources, such as an Amazon S3 bucket or a web server in your data center. To configure Route 53 to route traffic to your resources:

	1. Create a PUBLIC hosted, as we want to route internet traffic to our resources

		A public hosted zone is a container that holds information about how you want to route traffic on the internet (**records**). When you register a domain with Route 53, we create a hosted zone for you automatically -> After you create a hosted zone, you create records that specify how you want to route traffic for the domain and subdomains.


	2. Create records in the hosted zone. Records define where you want to route traffic for each domain name or subdomain name. For example, to route traffic for www.example.com to a web server in your data center, you typically create a www.example.com record in the example.com hosted zone


-> https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-custom-domain-walkthrough.html
-> https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html

-> https://github.com/aws-samples/amazon-cloudfront-secure-static-site#user-content-amazon-cloudfront-secure-static-website
-> https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/getting-started-secure-static-website-cloudformation-template.html
-> https://aws.amazon.com/es/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/

-> https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html










